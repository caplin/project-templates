import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'eclipse'

ext {
    major = 0
    minor = 0
    patch = 0

    adapterName = project.name
    replacements = [
            adapterName: adapterName,
    ]
}

version = major + "." + minor + "." + patch

repositories {
    mavenCentral()
    maven {
        credentials {
            username "$caplinNexusUser"
            password "$caplinNexusSecret"
        }
        url "https://repository.caplin.com"
    }
}

dependencies {
//    implementation fileTree(dir: 'lib', include: '*.jar')

    implementation(group: 'com.caplin.platform.integration.java', name: 'datasource', version: '7.1.+')
    implementation(group: 'com.caplin.platform.integration.java', name: 'trading-datasource', version: '7.1.+')
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.caplin.template.TradingAdapterTemplate',
            "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' ')
        )
    }
}

task createKit(type: Zip, dependsOn: jar) {
    archiveFileName = adapterName + "-" + archiveVersion.get() + ".zip"
    def topDirName = archiveFileName.get().substring(0, archiveFileName.get().lastIndexOf("."))

    into("${topDirName}") {
        from "${project.projectDir}/blade"
        include 'blade_config/bootstrap.conf'
        include 'DataSource/etc/trading-provider.properties'
        if (!project.hasProperty("configOnly")) {
            include 'DataSource/bin/start-jar.sh'
        }
        filter(ReplaceTokens, tokens: replacements)
    }

    into("${topDirName}") {
        from "${project.projectDir}/blade"
        exclude 'blade_config/bootstrap.conf'
        exclude 'DataSource/etc/trading-provider.properties'
        exclude 'DataSource/bin/start-jar.sh'
    }

    if (!project.hasProperty("configOnly")) {
        into("${topDirName}/DataSource/lib") {
            from([project.jar.outputs, configurations.runtimeClasspath])
        }
    }
}

task setupWorkingDirectory(type: Copy) {

    from("${project.projectDir}/blade") {
        include 'blade_config/bootstrap.conf'
        filter(ReplaceTokens, tokens: replacements)
    }
    from("${project.projectDir}/blade") {
        exclude 'blade_config/bootstrap.conf'
        exclude 'DataSource/bin'
        exclude 'Liberator'
    }
    into("${buildDir}/env")
}

task createEnvironmentConfig {
    String thisLeg = (project.hasProperty("thisLeg") ? project.thisLeg : "1")

    String content = """
                     define THIS_LEG                            ${thisLeg}
                     define LIBERATOR${thisLeg}_HOST            ${(project.hasProperty("liberatorHost") ? project.liberatorHost : "localhost")}
                     define LIBERATOR${thisLeg}_DATASRCPORT     ${(project.hasProperty("liberatorDsPort") ? project.liberatorDsPort : "15001")}

                     add-field  CONTRIB_USER    20000
                     """.stripIndent()

    new File("${setupWorkingDirectory.getDestinationDir().getAbsolutePath()}/blade_config/").mkdirs()
    new File("${setupWorkingDirectory.getDestinationDir().getAbsolutePath()}/blade_config/environment-ide.conf").text=content
}

setupWorkingDirectory.finalizedBy createEnvironmentConfig

assemble.dependsOn(createKit)
